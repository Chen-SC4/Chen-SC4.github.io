<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>第81场双周赛 Leetcode</title>
    <link href="/2022/07/09/%E7%AC%AC81%E5%9C%BA%E5%8F%8C%E5%91%A8%E8%B5%9B-Leetcode/"/>
    <url>/2022/07/09/%E7%AC%AC81%E5%9C%BA%E5%8F%8C%E5%91%A8%E8%B5%9B-Leetcode/</url>
    
    <content type="html"><![CDATA[<h2 id="统计星号">1. <ahref="https://leetcode.cn/problems/count-asterisks/">统计星号</a></h2><blockquote><p>使用一个<code>isInner</code>变量来判断当前是否在一对<code>'|'</code>之间。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">countAsterisks</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-type">char</span>[] sArray = s.toCharArray();<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isInner</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : sArray) &#123;<br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;|&#x27;</span>) &#123;<br>                isInner = !isInner;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;*&#x27;</span> &amp;&amp; !isInner) &#123;<br>                ++ret;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="统计无向图中无法互相到达点对数">2. <ahref="https://leetcode.cn/problems/count-unreachable-pairs-of-nodes-in-an-undirected-graph/">统计无向图中无法互相到达点对数</a></h2><blockquote><p>使用并查集，将相互之间可以到达的点划分到同一个集合中。之后统计每个子集中点的数目就可以算出点的对数。</p></blockquote><p>假设当前的某一个集合中有<code>count</code>个节点，记<code>n</code>为所有点的数目，则当前集合能与集合外的点形成的点的数目<code>res</code>为</p><p><span class="math display">\[    res = count \times (n - count)\]</span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">countPairs</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span>[][] edges)</span> &#123;<br>        <span class="hljs-comment">//并查集初始化</span><br>        <span class="hljs-type">int</span>[] parents = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            parents[i] = i;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] edge : edges) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> edge[<span class="hljs-number">0</span>], dist = edge[<span class="hljs-number">1</span>];<br>            merge(parents, start, dist);<br>        &#125;<br><br>        Map&lt;Integer, Integer&gt; countMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> find(parents, i);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> countMap.getOrDefault(parent, <span class="hljs-number">0</span>);<br>            countMap.put(parent, count + <span class="hljs-number">1</span>);<br>        &#125;<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> entry : countMap.entrySet()) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> entry.getValue();<br>            res = res + (count * <span class="hljs-number">1L</span> * (n - count));<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res / <span class="hljs-number">2</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//寻找 (路径压缩)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span>[] parents, <span class="hljs-type">int</span> i)</span> &#123;<br>        <span class="hljs-keyword">if</span> (parents[i] == i) <span class="hljs-keyword">return</span> i;<br>        parents[i] = find(parents, parents[i]);<br>        <span class="hljs-keyword">return</span> parents[i];<br>    &#125;<br><br>    <span class="hljs-comment">//合并 将i合并至j</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span>[] parents, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        parents[find(parents, i)] = find(parents, j);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="操作后的最大异或和">3. <ahref="https://leetcode.cn/problems/maximum-xor-after-operations/">操作后的最大异或和</a></h2><p>题目中的选择任意一个整数<code>x</code>，然后做<code>nums[i] AND (nums[i] XOR x)</code>，代表着可以选择将<code>nums[i]</code>的任意一位<code>1</code>改成<code>0</code>，但是不能将<code>0</code>改成<code>1</code>，这是<code>AND</code>操作的特点。</p><p>想要得到最大的逐位异或和就是代表异或的结果需要有尽可能多的位数为<code>1</code>。</p><p>因为只能将<code>nums[i]</code>的任意一位<code>1</code>改成<code>0</code>，所以要想得到最大异或和，应当尽可能的保存最多的<code>1</code>；或者说，将<code>nums</code>出现的所有<code>1</code>全部保留<code>1</code>次。符合或运算的特点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maximumXOR</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>            res = res | num;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="不同骰子序列的数目">4. <ahref="https://leetcode.cn/problems/number-of-distinct-roll-sequences/">不同骰子序列的数目</a></h2><p>分析题目，观察到一个序列中第<code>x</code>位的取值，与它的前两位有关，所以这里的状态数组可以使用两个维度来表示骰子的取值。</p><p><code>dp[i][j][k] -&gt; 投掷第i次骰子, 最后一次投掷出k, 倒数第二次投掷出j时, 合法序列的数目</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MOD</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (<span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">distinctSequences</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">int</span>[][][] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>][<span class="hljs-number">7</span>][<span class="hljs-number">7</span>];<br>        <span class="hljs-comment">//对n == 1的情况的特判</span><br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">6</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//初始化状态数组/状态数组的边界处理 n == 2 的情况</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">7</span>; ++i) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">7</span>; ++j) &#123;<br>                <span class="hljs-comment">//如果第一个数与第二个数不相等, 且最大公约数为1</span><br>                <span class="hljs-keyword">if</span> (i != j &amp;&amp; gcd(i, j) == <span class="hljs-number">1</span>) &#123;<br>                    dp[<span class="hljs-number">2</span>][i][j] = <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//填写状态数组/状态转移</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>; i &lt;= n; ++i) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">7</span>; ++j) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; k &lt; <span class="hljs-number">7</span>; ++k) &#123;<br>                    <span class="hljs-comment">//最后一次的点数与倒数第二次的点数符合要求</span><br>                    <span class="hljs-keyword">if</span> (j != k &amp;&amp; gcd(j, k) == <span class="hljs-number">1</span>) &#123;<br>                        <span class="hljs-comment">//状态转移 枚举当前点k的前第2个点 s j k</span><br>                        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; s &lt; <span class="hljs-number">7</span>; ++s) &#123;<br>                            <span class="hljs-keyword">if</span> (k != s &amp;&amp; s != j &amp;&amp; gcd(j, s) == <span class="hljs-number">1</span>)<br>                                dp[i][j][k] = (dp[i][j][k] + dp[i - <span class="hljs-number">1</span>][s][j]) % MOD;                        <br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//统计结果</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">7</span>; ++i) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">7</span>; ++j) &#123;<br>                result = (result + dp[n][i][j]) % MOD;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">//辗转相除法求最大公约数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-keyword">return</span> b &gt; <span class="hljs-number">0</span> ? gcd(b, a % b) : a;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法题目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Leetcode 双周赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo图片问题 处理方式1</title>
    <link href="/2022/06/26/Hexo%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98-%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F1/"/>
    <url>/2022/06/26/Hexo%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98-%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F1/</url>
    
    <content type="html"><![CDATA[<h2 id="hexo图片问题-处理方式1">Hexo图片问题 处理方式1</h2><p>初次搭建博客，暂时使用<code>GitHub</code>来做图床，计划后续迁移到七牛云。</p><h2 id="下载picgo">下载<ahref="https://github.com/Molunerfinn/PicGo/releases">PicGo</a></h2><p>下载PicGo用来进行图片上传</p><h2 id="在github中新建一个仓库">在<code>GitHub</code>中新建一个仓库</h2><p>在<code>GitHub</code>中新建一个仓库，用来存放静态资源。仓库的名字可以任意。</p><h2 id="配置picgo">配置PicGo</h2><figure><imgsrc="https://cdn.jsdelivr.net/gh/Chen-SC4/HexoImages/20220626140227.png"alt="Pic配置图片" /><figcaption aria-hidden="true">Pic配置图片</figcaption></figure><ul><li>设定仓库名 填写<code>用户名/仓库名</code></li><li>分支名 默认填写为<code>main</code></li><li>Token用于验证个人身份<ul><li>点击<code>GitHub</code>右上角个人头像 <code>settings</code></li><li>点击左侧菜单最底部的<code>Developer Settings</code><ul><li>点击左侧菜单中的 <code>Personal access tokens</code></li><li>点击 <code>Generate new token</code></li><li><code>Note</code> 中填写<code>token</code>的使用目的</li><li><code>Expiration</code>表示<code>token</code>的有效时间可以选择永久</li><li><code>Select Scope</code>选择第一个<code>repo</code>即可</li></ul></li></ul></li><li>设定自定义域名 该项为可选项<ul><li>如果不填 从国内访问博客 图片加载可能会很慢</li><li>可以填写一个免费的CDN加速<code>https://cdn.jsdelivr.net/gh/GitHub用户名/仓库名</code></li><li><code>jsdelivr</code>有下线的风险，推荐后续将图片资源转移到自己的服务器上</li></ul></li></ul><h2 id="点击确定-配置完成">点击确定 配置完成</h2><p>之后只要截取图片使用<code>PicGo</code>上传，然后选择链接格式，再在<code>相册</code>中找到对应的图片，点击复制链接即可。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/06/25/hello-world/"/>
    <url>/2022/06/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
